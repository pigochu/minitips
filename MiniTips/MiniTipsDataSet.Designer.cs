//------------------------------------------------------------------------------
// <auto-generated>
//     這段程式碼是由工具產生的。
//     執行階段版本:2.0.50727.4927
//
//     對這個檔案所做的變更可能會造成錯誤的行為，而且如果重新產生程式碼，
//     變更將會遺失。
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace MiniTips {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("MiniTipsDataSet")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class MiniTipsDataSet : global::System.Data.DataSet {
        
        private TipsTimeDataTable tableTipsTime;
        
        private TipsDataTable tableTips;
        
        private TipsNotifiedDataTable tableTipsNotified;
        
        private global::System.Data.DataRelation relationFK_Tips_TipsTime;
        
        private global::System.Data.DataRelation relationFK_Tips_TipsNotified;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public MiniTipsDataSet() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected MiniTipsDataSet(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["TipsTime"] != null)) {
                    base.Tables.Add(new TipsTimeDataTable(ds.Tables["TipsTime"]));
                }
                if ((ds.Tables["Tips"] != null)) {
                    base.Tables.Add(new TipsDataTable(ds.Tables["Tips"]));
                }
                if ((ds.Tables["TipsNotified"] != null)) {
                    base.Tables.Add(new TipsNotifiedDataTable(ds.Tables["TipsNotified"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public TipsTimeDataTable TipsTime {
            get {
                return this.tableTipsTime;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public TipsDataTable Tips {
            get {
                return this.tableTips;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public TipsNotifiedDataTable TipsNotified {
            get {
                return this.tableTipsNotified;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            MiniTipsDataSet cln = ((MiniTipsDataSet)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["TipsTime"] != null)) {
                    base.Tables.Add(new TipsTimeDataTable(ds.Tables["TipsTime"]));
                }
                if ((ds.Tables["Tips"] != null)) {
                    base.Tables.Add(new TipsDataTable(ds.Tables["Tips"]));
                }
                if ((ds.Tables["TipsNotified"] != null)) {
                    base.Tables.Add(new TipsNotifiedDataTable(ds.Tables["TipsNotified"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableTipsTime = ((TipsTimeDataTable)(base.Tables["TipsTime"]));
            if ((initTable == true)) {
                if ((this.tableTipsTime != null)) {
                    this.tableTipsTime.InitVars();
                }
            }
            this.tableTips = ((TipsDataTable)(base.Tables["Tips"]));
            if ((initTable == true)) {
                if ((this.tableTips != null)) {
                    this.tableTips.InitVars();
                }
            }
            this.tableTipsNotified = ((TipsNotifiedDataTable)(base.Tables["TipsNotified"]));
            if ((initTable == true)) {
                if ((this.tableTipsNotified != null)) {
                    this.tableTipsNotified.InitVars();
                }
            }
            this.relationFK_Tips_TipsTime = this.Relations["FK_Tips_TipsTime"];
            this.relationFK_Tips_TipsNotified = this.Relations["FK_Tips_TipsNotified"];
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "MiniTipsDataSet";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/MiniTipsDataSet.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableTipsTime = new TipsTimeDataTable();
            base.Tables.Add(this.tableTipsTime);
            this.tableTips = new TipsDataTable();
            base.Tables.Add(this.tableTips);
            this.tableTipsNotified = new TipsNotifiedDataTable();
            base.Tables.Add(this.tableTipsNotified);
            global::System.Data.ForeignKeyConstraint fkc;
            fkc = new global::System.Data.ForeignKeyConstraint("FK_Tips_TipsTime", new global::System.Data.DataColumn[] {
                        this.tableTips.TipIdColumn}, new global::System.Data.DataColumn[] {
                        this.tableTipsTime.TipIdColumn});
            this.tableTipsTime.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("FK_Tips_TipsNotified", new global::System.Data.DataColumn[] {
                        this.tableTips.TipIdColumn}, new global::System.Data.DataColumn[] {
                        this.tableTipsNotified.TipIdColumn});
            this.tableTipsNotified.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            this.relationFK_Tips_TipsTime = new global::System.Data.DataRelation("FK_Tips_TipsTime", new global::System.Data.DataColumn[] {
                        this.tableTips.TipIdColumn}, new global::System.Data.DataColumn[] {
                        this.tableTipsTime.TipIdColumn}, false);
            this.Relations.Add(this.relationFK_Tips_TipsTime);
            this.relationFK_Tips_TipsNotified = new global::System.Data.DataRelation("FK_Tips_TipsNotified", new global::System.Data.DataColumn[] {
                        this.tableTips.TipIdColumn}, new global::System.Data.DataColumn[] {
                        this.tableTipsNotified.TipIdColumn}, false);
            this.Relations.Add(this.relationFK_Tips_TipsNotified);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeTipsTime() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeTips() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeTipsNotified() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            MiniTipsDataSet ds = new MiniTipsDataSet();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void TipsTimeRowChangeEventHandler(object sender, TipsTimeRowChangeEvent e);
        
        public delegate void TipsRowChangeEventHandler(object sender, TipsRowChangeEvent e);
        
        public delegate void TipsNotifiedRowChangeEventHandler(object sender, TipsNotifiedRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class TipsTimeDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnTipTimeId;
            
            private global::System.Data.DataColumn columnTipId;
            
            private global::System.Data.DataColumn columnTipType;
            
            private global::System.Data.DataColumn columnWeek;
            
            private global::System.Data.DataColumn columnTipDateTime;
            
            private global::System.Data.DataColumn columnEnableExpireNotify;
            
            private global::System.Data.DataColumn columnExpireDay;
            
            private global::System.Data.DataColumn columnExpireHour;
            
            private global::System.Data.DataColumn columnExpireMinute;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TipsTimeDataTable() {
                this.TableName = "TipsTime";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal TipsTimeDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected TipsTimeDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TipTimeIdColumn {
                get {
                    return this.columnTipTimeId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TipIdColumn {
                get {
                    return this.columnTipId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TipTypeColumn {
                get {
                    return this.columnTipType;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn WeekColumn {
                get {
                    return this.columnWeek;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TipDateTimeColumn {
                get {
                    return this.columnTipDateTime;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EnableExpireNotifyColumn {
                get {
                    return this.columnEnableExpireNotify;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ExpireDayColumn {
                get {
                    return this.columnExpireDay;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ExpireHourColumn {
                get {
                    return this.columnExpireHour;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ExpireMinuteColumn {
                get {
                    return this.columnExpireMinute;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TipsTimeRow this[int index] {
                get {
                    return ((TipsTimeRow)(this.Rows[index]));
                }
            }
            
            public event TipsTimeRowChangeEventHandler TipsTimeRowChanging;
            
            public event TipsTimeRowChangeEventHandler TipsTimeRowChanged;
            
            public event TipsTimeRowChangeEventHandler TipsTimeRowDeleting;
            
            public event TipsTimeRowChangeEventHandler TipsTimeRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddTipsTimeRow(TipsTimeRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TipsTimeRow AddTipsTimeRow(ulong TipTimeId, TipsRow parentTipsRowByFK_Tips_TipsTime, int TipType, byte Week, System.DateTime TipDateTime, bool EnableExpireNotify, int ExpireDay, int ExpireHour, int ExpireMinute) {
                TipsTimeRow rowTipsTimeRow = ((TipsTimeRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        TipTimeId,
                        null,
                        TipType,
                        Week,
                        TipDateTime,
                        EnableExpireNotify,
                        ExpireDay,
                        ExpireHour,
                        ExpireMinute};
                if ((parentTipsRowByFK_Tips_TipsTime != null)) {
                    columnValuesArray[1] = parentTipsRowByFK_Tips_TipsTime[0];
                }
                rowTipsTimeRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowTipsTimeRow);
                return rowTipsTimeRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TipsTimeRow FindByTipTimeId(ulong TipTimeId) {
                return ((TipsTimeRow)(this.Rows.Find(new object[] {
                            TipTimeId})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                TipsTimeDataTable cln = ((TipsTimeDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new TipsTimeDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnTipTimeId = base.Columns["TipTimeId"];
                this.columnTipId = base.Columns["TipId"];
                this.columnTipType = base.Columns["TipType"];
                this.columnWeek = base.Columns["Week"];
                this.columnTipDateTime = base.Columns["TipDateTime"];
                this.columnEnableExpireNotify = base.Columns["EnableExpireNotify"];
                this.columnExpireDay = base.Columns["ExpireDay"];
                this.columnExpireHour = base.Columns["ExpireHour"];
                this.columnExpireMinute = base.Columns["ExpireMinute"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnTipTimeId = new global::System.Data.DataColumn("TipTimeId", typeof(ulong), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTipTimeId);
                this.columnTipId = new global::System.Data.DataColumn("TipId", typeof(ulong), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTipId);
                this.columnTipType = new global::System.Data.DataColumn("TipType", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTipType);
                this.columnWeek = new global::System.Data.DataColumn("Week", typeof(byte), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnWeek);
                this.columnTipDateTime = new global::System.Data.DataColumn("TipDateTime", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTipDateTime);
                this.columnEnableExpireNotify = new global::System.Data.DataColumn("EnableExpireNotify", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEnableExpireNotify);
                this.columnExpireDay = new global::System.Data.DataColumn("ExpireDay", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnExpireDay);
                this.columnExpireHour = new global::System.Data.DataColumn("ExpireHour", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnExpireHour);
                this.columnExpireMinute = new global::System.Data.DataColumn("ExpireMinute", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnExpireMinute);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnTipTimeId}, true));
                this.columnTipTimeId.AllowDBNull = false;
                this.columnTipTimeId.Unique = true;
                this.columnTipId.AllowDBNull = false;
                this.columnTipType.AllowDBNull = false;
                this.columnTipType.DefaultValue = ((int)(0));
                this.columnEnableExpireNotify.DefaultValue = ((bool)(false));
                this.columnExpireDay.DefaultValue = ((int)(0));
                this.columnExpireHour.DefaultValue = ((int)(0));
                this.columnExpireMinute.DefaultValue = ((int)(0));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TipsTimeRow NewTipsTimeRow() {
                return ((TipsTimeRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new TipsTimeRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(TipsTimeRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.TipsTimeRowChanged != null)) {
                    this.TipsTimeRowChanged(this, new TipsTimeRowChangeEvent(((TipsTimeRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.TipsTimeRowChanging != null)) {
                    this.TipsTimeRowChanging(this, new TipsTimeRowChangeEvent(((TipsTimeRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.TipsTimeRowDeleted != null)) {
                    this.TipsTimeRowDeleted(this, new TipsTimeRowChangeEvent(((TipsTimeRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.TipsTimeRowDeleting != null)) {
                    this.TipsTimeRowDeleting(this, new TipsTimeRowChangeEvent(((TipsTimeRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveTipsTimeRow(TipsTimeRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                MiniTipsDataSet ds = new MiniTipsDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "TipsTimeDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class TipsDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnTipId;
            
            private global::System.Data.DataColumn columnSubject;
            
            private global::System.Data.DataColumn columnDescription;
            
            private global::System.Data.DataColumn columnUrl;
            
            private global::System.Data.DataColumn columnActive;
            
            private global::System.Data.DataColumn columnCreateDate;
            
            private global::System.Data.DataColumn columnLastNotifiedDate;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TipsDataTable() {
                this.TableName = "Tips";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal TipsDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected TipsDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TipIdColumn {
                get {
                    return this.columnTipId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SubjectColumn {
                get {
                    return this.columnSubject;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DescriptionColumn {
                get {
                    return this.columnDescription;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UrlColumn {
                get {
                    return this.columnUrl;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ActiveColumn {
                get {
                    return this.columnActive;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CreateDateColumn {
                get {
                    return this.columnCreateDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LastNotifiedDateColumn {
                get {
                    return this.columnLastNotifiedDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TipsRow this[int index] {
                get {
                    return ((TipsRow)(this.Rows[index]));
                }
            }
            
            public event TipsRowChangeEventHandler TipsRowChanging;
            
            public event TipsRowChangeEventHandler TipsRowChanged;
            
            public event TipsRowChangeEventHandler TipsRowDeleting;
            
            public event TipsRowChangeEventHandler TipsRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddTipsRow(TipsRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TipsRow AddTipsRow(ulong TipId, string Subject, string Description, string Url, bool Active, System.DateTime CreateDate, System.DateTime LastNotifiedDate) {
                TipsRow rowTipsRow = ((TipsRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        TipId,
                        Subject,
                        Description,
                        Url,
                        Active,
                        CreateDate,
                        LastNotifiedDate};
                rowTipsRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowTipsRow);
                return rowTipsRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TipsRow FindByTipId(ulong TipId) {
                return ((TipsRow)(this.Rows.Find(new object[] {
                            TipId})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                TipsDataTable cln = ((TipsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new TipsDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnTipId = base.Columns["TipId"];
                this.columnSubject = base.Columns["Subject"];
                this.columnDescription = base.Columns["Description"];
                this.columnUrl = base.Columns["Url"];
                this.columnActive = base.Columns["Active"];
                this.columnCreateDate = base.Columns["CreateDate"];
                this.columnLastNotifiedDate = base.Columns["LastNotifiedDate"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnTipId = new global::System.Data.DataColumn("TipId", typeof(ulong), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTipId);
                this.columnSubject = new global::System.Data.DataColumn("Subject", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSubject);
                this.columnDescription = new global::System.Data.DataColumn("Description", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDescription);
                this.columnUrl = new global::System.Data.DataColumn("Url", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUrl);
                this.columnActive = new global::System.Data.DataColumn("Active", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnActive);
                this.columnCreateDate = new global::System.Data.DataColumn("CreateDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCreateDate);
                this.columnLastNotifiedDate = new global::System.Data.DataColumn("LastNotifiedDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLastNotifiedDate);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnTipId}, true));
                this.columnTipId.AllowDBNull = false;
                this.columnTipId.Unique = true;
                this.columnActive.DefaultValue = ((bool)(false));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TipsRow NewTipsRow() {
                return ((TipsRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new TipsRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(TipsRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.TipsRowChanged != null)) {
                    this.TipsRowChanged(this, new TipsRowChangeEvent(((TipsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.TipsRowChanging != null)) {
                    this.TipsRowChanging(this, new TipsRowChangeEvent(((TipsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.TipsRowDeleted != null)) {
                    this.TipsRowDeleted(this, new TipsRowChangeEvent(((TipsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.TipsRowDeleting != null)) {
                    this.TipsRowDeleting(this, new TipsRowChangeEvent(((TipsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveTipsRow(TipsRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                MiniTipsDataSet ds = new MiniTipsDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "TipsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class TipsNotifiedDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnTipId;
            
            private global::System.Data.DataColumn columnViewed;
            
            private global::System.Data.DataColumn columnNotifiedDate;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TipsNotifiedDataTable() {
                this.TableName = "TipsNotified";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal TipsNotifiedDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected TipsNotifiedDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TipIdColumn {
                get {
                    return this.columnTipId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ViewedColumn {
                get {
                    return this.columnViewed;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NotifiedDateColumn {
                get {
                    return this.columnNotifiedDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TipsNotifiedRow this[int index] {
                get {
                    return ((TipsNotifiedRow)(this.Rows[index]));
                }
            }
            
            public event TipsNotifiedRowChangeEventHandler TipsNotifiedRowChanging;
            
            public event TipsNotifiedRowChangeEventHandler TipsNotifiedRowChanged;
            
            public event TipsNotifiedRowChangeEventHandler TipsNotifiedRowDeleting;
            
            public event TipsNotifiedRowChangeEventHandler TipsNotifiedRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddTipsNotifiedRow(TipsNotifiedRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TipsNotifiedRow AddTipsNotifiedRow(TipsRow parentTipsRowByFK_Tips_TipsNotified, bool Viewed, System.DateTime NotifiedDate) {
                TipsNotifiedRow rowTipsNotifiedRow = ((TipsNotifiedRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        Viewed,
                        NotifiedDate};
                if ((parentTipsRowByFK_Tips_TipsNotified != null)) {
                    columnValuesArray[0] = parentTipsRowByFK_Tips_TipsNotified[0];
                }
                rowTipsNotifiedRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowTipsNotifiedRow);
                return rowTipsNotifiedRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                TipsNotifiedDataTable cln = ((TipsNotifiedDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new TipsNotifiedDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnTipId = base.Columns["TipId"];
                this.columnViewed = base.Columns["Viewed"];
                this.columnNotifiedDate = base.Columns["NotifiedDate"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnTipId = new global::System.Data.DataColumn("TipId", typeof(ulong), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTipId);
                this.columnViewed = new global::System.Data.DataColumn("Viewed", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnViewed);
                this.columnNotifiedDate = new global::System.Data.DataColumn("NotifiedDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNotifiedDate);
                this.columnViewed.DefaultValue = ((bool)(false));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TipsNotifiedRow NewTipsNotifiedRow() {
                return ((TipsNotifiedRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new TipsNotifiedRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(TipsNotifiedRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.TipsNotifiedRowChanged != null)) {
                    this.TipsNotifiedRowChanged(this, new TipsNotifiedRowChangeEvent(((TipsNotifiedRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.TipsNotifiedRowChanging != null)) {
                    this.TipsNotifiedRowChanging(this, new TipsNotifiedRowChangeEvent(((TipsNotifiedRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.TipsNotifiedRowDeleted != null)) {
                    this.TipsNotifiedRowDeleted(this, new TipsNotifiedRowChangeEvent(((TipsNotifiedRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.TipsNotifiedRowDeleting != null)) {
                    this.TipsNotifiedRowDeleting(this, new TipsNotifiedRowChangeEvent(((TipsNotifiedRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveTipsNotifiedRow(TipsNotifiedRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                MiniTipsDataSet ds = new MiniTipsDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "TipsNotifiedDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class TipsTimeRow : global::System.Data.DataRow {
            
            private TipsTimeDataTable tableTipsTime;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal TipsTimeRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableTipsTime = ((TipsTimeDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ulong TipTimeId {
                get {
                    return ((ulong)(this[this.tableTipsTime.TipTimeIdColumn]));
                }
                set {
                    this[this.tableTipsTime.TipTimeIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ulong TipId {
                get {
                    return ((ulong)(this[this.tableTipsTime.TipIdColumn]));
                }
                set {
                    this[this.tableTipsTime.TipIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int TipType {
                get {
                    return ((int)(this[this.tableTipsTime.TipTypeColumn]));
                }
                set {
                    this[this.tableTipsTime.TipTypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte Week {
                get {
                    try {
                        return ((byte)(this[this.tableTipsTime.WeekColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("資料表 \'TipsTime\' 中資料行 \'Week\' 的值是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableTipsTime.WeekColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime TipDateTime {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableTipsTime.TipDateTimeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("資料表 \'TipsTime\' 中資料行 \'TipDateTime\' 的值是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableTipsTime.TipDateTimeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool EnableExpireNotify {
                get {
                    try {
                        return ((bool)(this[this.tableTipsTime.EnableExpireNotifyColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("資料表 \'TipsTime\' 中資料行 \'EnableExpireNotify\' 的值是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableTipsTime.EnableExpireNotifyColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ExpireDay {
                get {
                    try {
                        return ((int)(this[this.tableTipsTime.ExpireDayColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("資料表 \'TipsTime\' 中資料行 \'ExpireDay\' 的值是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableTipsTime.ExpireDayColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ExpireHour {
                get {
                    try {
                        return ((int)(this[this.tableTipsTime.ExpireHourColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("資料表 \'TipsTime\' 中資料行 \'ExpireHour\' 的值是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableTipsTime.ExpireHourColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ExpireMinute {
                get {
                    try {
                        return ((int)(this[this.tableTipsTime.ExpireMinuteColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("資料表 \'TipsTime\' 中資料行 \'ExpireMinute\' 的值是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableTipsTime.ExpireMinuteColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TipsRow TipsRow {
                get {
                    return ((TipsRow)(this.GetParentRow(this.Table.ParentRelations["FK_Tips_TipsTime"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_Tips_TipsTime"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsWeekNull() {
                return this.IsNull(this.tableTipsTime.WeekColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetWeekNull() {
                this[this.tableTipsTime.WeekColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTipDateTimeNull() {
                return this.IsNull(this.tableTipsTime.TipDateTimeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTipDateTimeNull() {
                this[this.tableTipsTime.TipDateTimeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEnableExpireNotifyNull() {
                return this.IsNull(this.tableTipsTime.EnableExpireNotifyColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEnableExpireNotifyNull() {
                this[this.tableTipsTime.EnableExpireNotifyColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsExpireDayNull() {
                return this.IsNull(this.tableTipsTime.ExpireDayColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetExpireDayNull() {
                this[this.tableTipsTime.ExpireDayColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsExpireHourNull() {
                return this.IsNull(this.tableTipsTime.ExpireHourColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetExpireHourNull() {
                this[this.tableTipsTime.ExpireHourColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsExpireMinuteNull() {
                return this.IsNull(this.tableTipsTime.ExpireMinuteColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetExpireMinuteNull() {
                this[this.tableTipsTime.ExpireMinuteColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class TipsRow : global::System.Data.DataRow {
            
            private TipsDataTable tableTips;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal TipsRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableTips = ((TipsDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ulong TipId {
                get {
                    return ((ulong)(this[this.tableTips.TipIdColumn]));
                }
                set {
                    this[this.tableTips.TipIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Subject {
                get {
                    try {
                        return ((string)(this[this.tableTips.SubjectColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("資料表 \'Tips\' 中資料行 \'Subject\' 的值是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableTips.SubjectColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Description {
                get {
                    try {
                        return ((string)(this[this.tableTips.DescriptionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("資料表 \'Tips\' 中資料行 \'Description\' 的值是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableTips.DescriptionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Url {
                get {
                    try {
                        return ((string)(this[this.tableTips.UrlColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("資料表 \'Tips\' 中資料行 \'Url\' 的值是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableTips.UrlColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Active {
                get {
                    try {
                        return ((bool)(this[this.tableTips.ActiveColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("資料表 \'Tips\' 中資料行 \'Active\' 的值是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableTips.ActiveColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime CreateDate {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableTips.CreateDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("資料表 \'Tips\' 中資料行 \'CreateDate\' 的值是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableTips.CreateDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime LastNotifiedDate {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableTips.LastNotifiedDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("資料表 \'Tips\' 中資料行 \'LastNotifiedDate\' 的值是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableTips.LastNotifiedDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSubjectNull() {
                return this.IsNull(this.tableTips.SubjectColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSubjectNull() {
                this[this.tableTips.SubjectColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDescriptionNull() {
                return this.IsNull(this.tableTips.DescriptionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDescriptionNull() {
                this[this.tableTips.DescriptionColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUrlNull() {
                return this.IsNull(this.tableTips.UrlColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUrlNull() {
                this[this.tableTips.UrlColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsActiveNull() {
                return this.IsNull(this.tableTips.ActiveColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetActiveNull() {
                this[this.tableTips.ActiveColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCreateDateNull() {
                return this.IsNull(this.tableTips.CreateDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCreateDateNull() {
                this[this.tableTips.CreateDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLastNotifiedDateNull() {
                return this.IsNull(this.tableTips.LastNotifiedDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLastNotifiedDateNull() {
                this[this.tableTips.LastNotifiedDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TipsNotifiedRow[] GetTipsNotifiedRows() {
                if ((this.Table.ChildRelations["FK_Tips_TipsNotified"] == null)) {
                    return new TipsNotifiedRow[0];
                }
                else {
                    return ((TipsNotifiedRow[])(base.GetChildRows(this.Table.ChildRelations["FK_Tips_TipsNotified"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TipsTimeRow[] GetTipsTimeRows() {
                if ((this.Table.ChildRelations["FK_Tips_TipsTime"] == null)) {
                    return new TipsTimeRow[0];
                }
                else {
                    return ((TipsTimeRow[])(base.GetChildRows(this.Table.ChildRelations["FK_Tips_TipsTime"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class TipsNotifiedRow : global::System.Data.DataRow {
            
            private TipsNotifiedDataTable tableTipsNotified;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal TipsNotifiedRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableTipsNotified = ((TipsNotifiedDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ulong TipId {
                get {
                    try {
                        return ((ulong)(this[this.tableTipsNotified.TipIdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("資料表 \'TipsNotified\' 中資料行 \'TipId\' 的值是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableTipsNotified.TipIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Viewed {
                get {
                    try {
                        return ((bool)(this[this.tableTipsNotified.ViewedColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("資料表 \'TipsNotified\' 中資料行 \'Viewed\' 的值是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableTipsNotified.ViewedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime NotifiedDate {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableTipsNotified.NotifiedDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("資料表 \'TipsNotified\' 中資料行 \'NotifiedDate\' 的值是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableTipsNotified.NotifiedDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TipsRow TipsRow {
                get {
                    return ((TipsRow)(this.GetParentRow(this.Table.ParentRelations["FK_Tips_TipsNotified"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_Tips_TipsNotified"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTipIdNull() {
                return this.IsNull(this.tableTipsNotified.TipIdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTipIdNull() {
                this[this.tableTipsNotified.TipIdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsViewedNull() {
                return this.IsNull(this.tableTipsNotified.ViewedColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetViewedNull() {
                this[this.tableTipsNotified.ViewedColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNotifiedDateNull() {
                return this.IsNull(this.tableTipsNotified.NotifiedDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNotifiedDateNull() {
                this[this.tableTipsNotified.NotifiedDateColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class TipsTimeRowChangeEvent : global::System.EventArgs {
            
            private TipsTimeRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TipsTimeRowChangeEvent(TipsTimeRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TipsTimeRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class TipsRowChangeEvent : global::System.EventArgs {
            
            private TipsRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TipsRowChangeEvent(TipsRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TipsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class TipsNotifiedRowChangeEvent : global::System.EventArgs {
            
            private TipsNotifiedRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TipsNotifiedRowChangeEvent(TipsNotifiedRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TipsNotifiedRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}

#pragma warning restore 1591